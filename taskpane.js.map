{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/taskpane/taskpane.html","webpack://office-addin-taskpane-js/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/compat get default export","webpack://office-addin-taskpane-js/webpack/runtime/define property getters","webpack://office-addin-taskpane-js/webpack/runtime/global","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/webpack/runtime/publicPath","webpack://office-addin-taskpane-js/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js","webpack://office-addin-taskpane-js/./src/taskpane/presets/presets.js","webpack://office-addin-taskpane-js/./src/taskpane/eastereggs/jokes.js"],"sourcesContent":["// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./logo-filled.png\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Data Merge Utility</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <div id=\\\"loader-container\\\"> <div id=\\\"loader-contents\\\"> <h4 id=\\\"loader-title\\\">Processing...</h4> <p>Splitting the thing...</p> </div> </div> <div id=\\\"message\\\" style=\\\"display:none\\\"> <div id=\\\"message-contents\\\"> <h4>Message Title</h4> <p id=\\\"message-text\\\">Message text...</p> <button class=\\\"btns\\\" id=\\\"msg-dismiss\\\">Dismiss</button> </div> </div> <div id=\\\"title-area\\\"> <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\"/> <h3>Data Merge Utility</h3> <p id=\\\"editSplash\\\" style=\\\"padding:1em;display:none\\\"><small>Now that your data is loaded, you may edit individual columns down below.</small></p> </div> <div id=\\\"top-controls\\\"> <select class=\\\"custom-select wider-elements\\\" id=\\\"presets\\\"> <option id=\\\"preset-placeholder\\\" value=\\\"none\\\" selected=\\\"selected\\\" disabled=\\\"disabled\\\">Choose a preset...</option> </select> <div id=\\\"top-controls-btns\\\"> <button id=\\\"btn-load\\\" class=\\\"btns\\\">Load Data</button> <button id=\\\"btn-reset\\\" class=\\\"btns\\\" style=\\\"display:none\\\">Reset</button> <button id=\\\"btn-process\\\" class=\\\"btns\\\" style=\\\"display:none\\\">Process</button> <button id=\\\"btn-export\\\" class=\\\"btns\\\" style=\\\"display:none\\\">Export</button> </div> </div> <div class=\\\"control\\\"> <input type=\\\"checkbox\\\" id=\\\"samplerows\\\" name=\\\"samplerows\\\"> <label for=\\\"samplerows\\\">Sample Rows</label> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> 5 Rows of \\\"SAMPLE\\\" for setting up the printers. </div> </div> <div class=\\\"control\\\"> <input type=\\\"checkbox\\\" id=\\\"alt-rows\\\"/> <label for=\\\"alt-rows\\\">Alternating Rows</label> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Row numbers appear beside each other on the press sheet. </div> </div> <div class=\\\"control\\\"> <p>Number Up</p> <input type=\\\"number\\\" class=\\\"clear-inputs wider-elements\\\" id=\\\"num-up\\\" value=\\\"1\\\"/> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> The number of pieces that appear on each page of the press sheet. </div> </div> <div class=\\\"control\\\"> <input type=\\\"checkbox\\\" id=\\\"curres\\\"/> <label for=\\\"curres\\\">(Or) Current Resident Columns</label> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Adds two columns to the spreadsheet for \\\"Current Resident\\\" and \\\"Or Current Resident\\\" </div> </div> <div class=\\\"control\\\"> <label for=\\\"dates\\\">Date Formatting</label> <select class=\\\"custom-select wider-elements\\\" id=\\\"dates\\\"> <option value=\\\"m/d/yy\\\" selected=\\\"selected\\\">8/6/24</option> <option value=\\\"mm/dd/yyyy\\\">08/06/2024</option> <option value=\\\"mm/dd/yy\\\">08/06/24</option> <option value=\\\"dd/mm/yyyy\\\">06/08/2024</option> <option value=\\\"dd/mm/yy\\\">06/08/24</option> <option value=\\\"[$-en-US]mmmm d, yyyy;@\\\">August 6, 2024</option> <option value=\\\"[$-en-US]mmm d, yyyy;@\\\">Aug 6, 2024</option> <option value=\\\"[$-en-US]mmm d, yy;@\\\">Aug 6, 24</option> <option value=\\\"m-d-yy\\\">8-6-24</option> <option value=\\\"mm-dd-yyyy\\\">08-06-2024</option> <option value=\\\"mm-dd-yy\\\">08-06-24</option> <option value=\\\"dd-mm-yyyy\\\">06-08-2024</option> <option value=\\\"dd-mm-yy\\\">06-08-24</option> </select> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Formats the dates in the spreadsheet. (August 6, 2024 is an example to visualize the date format selected) </div> </div> <div class=\\\"control\\\"> <p>Number of Output Files</p> <input type=\\\"number\\\" class=\\\"clear-inputs wider-elements\\\" id=\\\"drops\\\" value=\\\"1\\\"/> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Number of sheets to produce </div> </div> <div class=\\\"collapsible\\\" id=\\\"collapsible\\\" style=\\\"display:none\\\"> <div class=\\\"collapsible-head\\\" item=\\\"utility\\\"> <p>Edit Columns</p> </div> <div class=\\\"collapsible-container\\\" id=\\\"utility-container\\\"> <div class=\\\"control\\\"> <p>Artwork Column</p> <div class=\\\"text-input-area\\\"> <input type=\\\"text\\\" class=\\\"text-input clear-inputs\\\" id=\\\"artworkData\\\" placeholder=\\\"Directory Here\\\" value=\\\"/Artwork/\\\"/> <button id=\\\"artworkCol\\\" class=\\\"text-input-btn btns\\\">&gt;</button> </div> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Converts the selected column into an Artwork column. Prepends \\\"'@\\\" to the header, prepends inputted directory to the column data and makes all file extensions lowercase. </div> </div> <div class=\\\"control\\\"> <p>Prepend Text</p> <div class=\\\"text-input-area\\\"> <input type=\\\"text\\\" class=\\\"text-input clear-inputs\\\" id=\\\"prependData\\\"/> <button class=\\\"text-input-btn btns\\\" id=\\\"prepend\\\">&gt;</button> </div> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Inserts text before each cell in this column. </div> </div> <div class=\\\"control\\\"> <p>Append Text</p> <div class=\\\"text-input-area\\\"> <input type=\\\"text\\\" class=\\\"text-input clear-inputs\\\" id=\\\"appendData\\\"/> <button id=\\\"append\\\" class=\\\"text-input-btn btns\\\">&gt;</button> </div> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Inserts text after each cell in this column. </div> </div> <div class=\\\"control\\\"> <p>UPPERCASE Column <button id=\\\"uppercase\\\" class=\\\"text-input-btn btns\\\">&gt;</button></p> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Converts the column of selected cell to UPPERCASE. </div> </div> <div class=\\\"control\\\"> <p>lowercase Column <button id=\\\"lowercase\\\" class=\\\"text-input-btn btns\\\">&gt;</button></p> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Converts the column of selected cell to lowercase. </div> </div> <div class=\\\"control\\\"> <p>Title Case Column <button id=\\\"titlecase\\\" class=\\\"text-input-btn btns\\\">&gt;</button></p> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Converts the column of selected cell to Title/Proper Case. </div> </div> </div> </div> <p id=\\\"copy\\\"><span id=\\\"year\\\"></span> - Mail Shark DevOps</p>  </body> </html> \";\n// Exports\nexport default code;","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n\n  if (!url) {\n    return url;\n  } // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n\n\n  url = String(url.__esModule ? url.default : url);\n\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t41: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n\n//         ╔══════════════════════════════════════════════════════════╗\n//         ║             Variable Data Processing Utility             ║\n//         ╚══════════════════════════════════════════════════════════╝       \n//         ╭──────────────────────────────────────────────────────────╮\n//         │ Author(s): Todd  (todd@themailshark.com)                 |\n//         |            Danny (dliehr@themailshark.com)               │\n//         │                                                          │\n//         │ Description: A collection of useful scripts for          │\n//         │  processing variable lists. Useful for artists           │\n//         │  tasked with processing lists from Data Processing.      │\n//         ╰──────────────────────────────────────────────────────────╯\n\n\n//         +----------------------------------------------------------+\n//         |                       LOAD PRESETS                       |\n//         +----------------------------------------------------------+\nimport getPresets from \"./presets/presets.js\"\nconst presets = getPresets();\nimport getSplash from \"./eastereggs/jokes.js\";\nconst splashText = getSplash();\nconst currentYear= new Date().getFullYear();\n\n// For catching if something needs a sample row or not. Add more file extensions if artists start using more varied image types. Excluded GIF because under no circumstances should those be printing.\nvar imgSuffix = [\n    \"pdf\",\n    \"jpg\",\n    \"psd\",\n    \"png\",\n    \"bmp\",\n    \"svg\",\n    \"jpeg\",\n    \"tiff\",\n    \"tif\",\n    \"tif\",\n    \"webp\",\n    \"ai\",\n    \"indd\",\n    \"indt\",\n    \"idml\",\n]; // Hit as many as possible for any kind of image/variable request.\n\n\n/**\n * Makes a string Title Case\n * @param {String} str String to be formatted\n * @returns {String} Title Case String\n */\nfunction toTitleCase(str) {\n    // 1. Split the string into words\n    const words = str.split(' ');\n  \n    // 2. Define suffixes and titles (as arrays for efficient lookups)\n    const suffixes = [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"Jr\", \"Sr\", \"Jr.\", \"Sr.\"];\n    const titles = [\"Dr\", \"Mr\", \"Ms\", \"Mrs\", \"Miss\", \"Prof\"];\n  \n    // 3. Loop through each word\n    for (let i = 0; i < words.length; i++) {\n      let word = words[i];\n  \n      // 4. Check for suffixes at the end (but not the first word, and the previous word shouldn't be a title)\n      if (suffixes.includes(word.toUpperCase()) && (i > 0 && !titles.includes(words[i - 1]))) {\n        word = word.toUpperCase(); // Make suffix uppercase\n      // 5. Check for titles followed by names (not followed by suffixes)\n      } else if (titles.includes(word.toUpperCase()) && (i + 1 < words.length && !suffixes.includes(words[i + 1].toUpperCase()))) {\n        word = word.charAt(0).toUpperCase() + word.slice(1).toLowerCase(); // Title case the title and next word\n      // 6. Otherwise, apply standard title case\n      } else {\n        word = word.charAt(0).toUpperCase() + word.slice(1).toLowerCase(); // Standard title case\n      }\n  \n      // 7. Update the word in the array\n      words[i] = word;\n    }\n  \n    // 8. Join the modified words back into a string\n    return words.join(' ');\n  }\n  \n\n/**\n * Grabs an excel column from an index number.\n * @param {int} index \n * @returns {string} Column name\n */\nfunction getLetterByIndex(index) {\n    const alphabet = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n    let letter = \"\";\n\n    while (index >= 0) {\n        letter = alphabet[index % 26] + letter;\n        index = Math.floor(index / 26) - 1;\n    }\n\n    return letter;\n}\n  /**\n   * For funsies: Picks a random item from an array.\n   * @param {Array} arr Array of items\n   * @returns {String} A randomized item in the array\n   */\nfunction randomize(arr){\n    return arr[Math.floor(Math.random()*arr.length)]\n}\n\n/**\n * Counts how many digits a number is\n * @param {Number} number Input number\n * @returns {Number} Length of number\n */\nfunction countDigits(number) {\n    return String(number).length;\n  }\n\n    // Define a function that can turn Excel dates into a string\n    function excelDateToString(excelDate) {\n    // #region\n    // Subtract 25569 days (the difference between 1/1/1900 and 1/1/1970) and multiply by 86400000 milliseconds (one day)\n    let date = new Date((excelDate - 25569) * 86400000);\n\n    // Get the month, day, and year from the Date object\n    let month = date.getMonth() + 1; // Add one because months are zero-based\n    let day = date.getDate();\n    let year = date.getFullYear();\n\n    // Format the month, day, and year as two-digit strings\n    month = month < 10 ? \"0\" + month : month; // Add a leading zero if less than 10\n    day = day < 10 ? \"0\" + day : day; // Add a leading zero if less than 10\n    year = year.toString().slice(-2); // Get the last two digits of the year\n\n    // Return the date string in the format MM/DD/YY\n    return month + \"/\" + day + \"/\" + year;\n    // #endregion\n}\n\n  //#region CONVERT DATE TO SERIAL -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Converts input date into serial number that excel can apply conditional formatting to\n     * @param {Date} inDate A date variable\n     * @returns String\n     */\n    function JSDateToExcelDate(inDate) {\n        var returnDateTime = 25569.0 + ((inDate.getTime() - (inDate.getTimezoneOffset() * 60 * 1000)) / (1000 * 60 * 60 * 24));\n        //var returnDateTime = 25569.0 + ((inDate.getTime()) / (1000 * 60 * 60 * 24));\n        return returnDateTime.toString().substr(0,20);\n    };\n\n//#endregion -------------------------------------------------------------------------------------------------------------------------\n\n//#region CONVERT SERIAL TO DATE -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Finds the value of Date Added in the changed row and converts it to be a date object in EST.\n     * @param {Number} serial The serial number to be converted\n     * @returns Date\n     */\n    function convertToDate(serial) {\n        var date = new Date(Math.round((serial - 25569)*86400*1000)); //convert serial number to date object\n        date.setMinutes(date.getMinutes() + date.getTimezoneOffset()); //adjusting from GMT to EST (adds 4 hours)\n        return date;\n    };\n\n//#endregion -------------------------------------------------------------------------------------------------------------------------\n\nOffice.onReady(() => {\n    console.log(\"Office is ready.\")\n    presets.forEach((preset) => {\n        document.getElementById(\"presets\").innerHTML =\n            document.getElementById(\"presets\").innerHTML +\n            `<option\n                    name=\"${preset.name}\"\n                    alternateRows=\"${preset.alternateRows}\"\n                    numberUp=\"${preset.numberUp}\"\n                    drops=\"${preset.numberDrops}\"\n                >${preset.name}</option>`\n    });\n    document.querySelector(\"#year\").innerHTML=currentYear;  \n});\n\n/**\n * Take a date and formats it to be a string in the mm/dd/yy format\n * @param {Date} date A date variable\n * @returns String\n */\nfunction formatDate(date) {\n    var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n    year = year.toString().substr(-2);\n\n    return [month, day, year].join('/');\n};\n\n\n//         +----------------------------------------------------------+\n//         |                   ROWS TO COLUMNS                        |\n//         +----------------------------------------------------------+\n\n\ndocument.getElementById(\"presets\").addEventListener(\"change\", async () => {\n    // #region\n    // Show the Load Data area, then prefill data\n    let selSet= document.querySelector(\"#presets\");\n    let text = selSet.options[selSet.selectedIndex].text;\n    let product = presets.filter(product => product.name === text)[0];\n    // {name: \"Plastic Postcard (Large)\", alternateRows: true, numberUp: 3, numberDrops: 1}\n    document.getElementById(\"alt-rows\").checked = product.alternateRows;\n    document.getElementById(\"num-up\").value = product.numberUp;\n    document.getElementById(\"drops\").value = product.numberDrops;\n    document.getElementById(\"samplerows\").checked= product.trashRows;\n    document.getElementById(\"curres\").checked= product.curres;\n\n});\n\n//         +----------------------------------------------------------+\n//         |                    COLLAPSIBLE AREAS                     |\n//         +----------------------------------------------------------+\nconst collapsibles = document.getElementsByClassName(\"collapsible-head\");\n// #region\n// Attach event to each collapsible area...\nfor (var i = 0; i < collapsibles.length; i++) {\n    collapsibles[i].addEventListener(\"click\", function() {\n\n        // Which area do we want to show/hide?\n        let whatArea = this.getAttribute(\"item\");\n        let toggleArea = document.getElementById(`${whatArea}-container`);\n\n        // Toggle the view\n        let curStyle = toggleArea.style.display;\n        curStyle == \"block\"\n            ? toggleArea.style.display = \"none\"\n            : toggleArea.style.display = \"block\"\n\n    })\n    // #endregion\n};\n\n//         +----------------------------------------------------------+\n//         |                        LOAD DATA                         |\n//         +----------------------------------------------------------+\ndocument.getElementById(\"btn-load\").addEventListener(\"click\", async () => {\n    // #region\n\n\n    try {\n        await Excel.run(async (context) => {\n            // Get the active work sheet\n            let sheet = context.workbook.worksheets.getActiveWorksheet();\n                    \n            ///////////////////////////////////////////////////////////////////////////////\n            ////////////////////////////// CREATE TABLE ///////////////////////////////////\n            ///////////////////////////////////////////////////////////////////////////////\n            // Create a table out of the currently used range.\n\n            // Get the used range of the active worksheet\n            let range = sheet.getUsedRange();\n\n            // Load properties from the range\n            range.load(\"address\");\n\n            await context.sync();\n\n            console.log(range.address);\n\n            // If the address ends in A1, then there's no data on the sheet, alert user\n\n            if (range.address.slice(-2) == \"A1\") {\n                showMessage(\"No data!\", \"There appears to be no data on this sheet.\", \"error\");\n                throw \"No data!\"\n            }\n\n            // Create the table at the address loaded from the range\n            // and name it\n            var dataTable = sheet.tables.add(range.address, true);\n            dataTable.name = \"DataTable\";\n\n\n            try { await context.sync() } catch (e) {\n                if (e.message.includes(\"overlap\")) {\n                    document.querySelector(\"#collapsible\").style.display=\"block\";\n                    document.querySelector(\"#editSplash\").style.display=\"block\";\n                    console.log(\"⚠️ The table already exists.\")\n                    return;\n                } else {\n                    console.log(\"There was an unhandled problem. Error:\")\n                    console.log(e);\n                }\n            }\n\n            //////////////////////////////              //////////////////////////////////\n            ////////////////////////////// COUNT COLUMN //////////////////////////////////\n            //////////////////////////////              //////////////////////////////////\n            // Always add a count column to the table\n\n            const indexData = []\n\n            let bodyRangeValues = dataTable.getDataBodyRange().load(\"values\");\n\n            await context.sync();\n\n\n            var zeroNum = 0; // This will be a counter to see how many zeros we need for the count column.\n            bodyRangeValues.values.forEach((_row, i) => {\n                indexData.push([String(i + 1)])\n                zeroNum++;\n            });\n\n            indexData.unshift([\"count\"])\n\n            dataTable.columns.add(0, indexData);\n            var rowRange = sheet.getRange(\"A2\").getEntireColumn();\n            // Repeats \"0\" as many times as there are digtits in the highest value inside count column\n            rowRange.numberFormat = (\"0\").repeat(countDigits(zeroNum));\n\n\n            await context.sync();\n\n\n\n\n            // Autofit the data\n            sheet.getUsedRange().format.autofitColumns();\n            sheet.getUsedRange().format.autofitRows();\n            sheet.activate();\n\n            // Show the column editors\n            document.querySelector(\"#collapsible\").style.display=\"block\"\n            document.querySelector(\"#editSplash\").style.display=\"block\"\n\n        })\n    } catch (error) {\n        console.error(error);\n        return;\n    }\n\n\n    // Show/hide elements as necessary \n    document.querySelectorAll(\"#screen-1, #btn-reset, #btn-process\")\n        .forEach((elem) => {\n            elem.style.display = \"block\";\n        })\n    document.querySelectorAll(\"#btn-load, #btn-export\")\n        .forEach((elem) => {\n            elem.style.display = \"none\";\n        })\n    // document.getElementById(\"screen-2\").style.display = \"none\";\n\n\n    // #endregion\n});\n\n//         +----------------------------------------------------------+\n//         |                          RESET                           |\n//         +----------------------------------------------------------+\ndocument.getElementById(\"btn-reset\").addEventListener(\"click\", () => {\n    // #region \n    // Hide the appropriate areas\n    document\n        .querySelectorAll(\"#screen-1, #btn-reset, #btn-process, #btn-export\")\n        .forEach((elem) => {\n            elem.style.display = \"none\";\n        })\n\n    // Show/hide elements as necessary \n    document.querySelector(\"#btn-load\").style.display = \"block\";\n    document.getElementById(\"presets\").value = \"none\";\n\n    wipeSheets();\n\n    // #endregion\n});\n\n//         +----------------------------------------------------------+\n//         |                         PROCESS                          |\n//         +----------------------------------------------------------+\n\nlet headArr;\ndocument.getElementById(\"btn-process\").addEventListener(\"click\", async () => {\n    // #region\n\n    loaderShow(\"Processing...\", `Excel might hang for a moment. Sit tight.<br><small>${randomize(splashText)}</small>`)\n    await Excel.run(async (context) => {\n        // #region Excel.run()\n        // Get the necessary data from the front-end\n        let numUp = Number(document.getElementById(\"num-up\").value);\n        let alternate = document.getElementById(\"alt-rows\").checked;\n        let numDrops = Number(document.getElementById(\"drops\").value);\n        let dateFormat = document.getElementById(\"dates\").value;\n        \n\n        // If required data is missing, alert the user and cancel action\n        if (numUp === \"\") {\n\n            showMessage(\"Missing Number Up\",\n                \"Please enter a number up.\",\n                \"error\");\n\n            throw new Error(\"Missing a number up.\");\n        }\n\n        if (numDrops === \"\") {\n            showMessage(\"Missing Number of Drops\",\n                \"Please enter the number of drops.\",\n                \"error\");\n\n            throw new Error(\"Missing a number of drops\");\n        }\n\n\n        // Get the necessary data from the sheet\n        const sheet = context.workbook.worksheets.getActiveWorksheet();\n        const dataTable = sheet.tables.getItem(\"DataTable\");\n        const sampleRows= document.getElementById(\"samplerows\").checked;\n        const curres = document.querySelector(\"#curres\").checked;\n\n        // Extract the Header and Body values\n        let headerRangeValues = dataTable.getHeaderRowRange().load(\"values\");\n        let bodyRangeValues = dataTable.getDataBodyRange().load(\"values\");\n        await context.sync()\n        headArr = headerRangeValues.values[0];\n        \n        // Delete the existing Processed sheet, if it exists already\n        try {\n            let processedSheet = context.workbook.worksheets.getItem(\"Processed\");\n            processedSheet.delete();\n            await context.sync();\n        } catch (e) {\n            console.log(\"👍 No processed sheet found.\");\n        }\n\n        // Instantiate arrays to contain the new table data\n        let arr = bodyRangeValues.values.map((row) => row);\n        var newHeaders = [];\n\n        // Add alt column if we're supposed to.\n        if (alternate){\n            headerRangeValues.values[0].unshift(\"alternate\")\n        }\n\n\n\n\n    // New Movers Postcards/Plastics\n    if(document.getElementById(\"presets\").value.match(\"Monthly New Movers\")){\n            // New Header Columns for the Expirations\n        let newHeads = [\n            \"Expires_1\", \"Expiration_1\", \"Disclaimer_1\",\n            \"Expires_2\", \"Expiration_2\", \"Disclaimer_2\",\n            \"Expires_3\", \"Expiration_3\", \"Disclaimer_3\"\n        ]\n        let columns = dataTable.columns;\n        columns.load(\"items\");\n\n        await context.sync();\n\n        for (var i = 0; i < columns.items.length; i++) {\n            let colName = columns.items[i].name;\n            if (newHeads.indexOf(colName) >= 0) {\n                // Delete the column\n                columns.items[i].delete();\n            }\n        }\n\n\n\n        // Sync with Excel to load the data\n        await context.sync().catch((e) => {\n            // If there was a problem, tell the user.\n            showMessage(\"Danger!\",\n                \"There was a problem loading the data table.\",\n                \"error\");\n        });\n\n        // Assign table data to a variable\n        const bodyArr = bodyRangeValues.values;\n\n\n        // ┌\n        // │  EXPIRATIONS                                             \n        // └                                                           \n        let addExpirations = async () => {\n            // #region EXPIRATIONS\n            // Find the index of the Coupons column\n            let couponIndex = headArr.indexOf(\"Coupons\");\n \n\n            // Add 9 columns to the dataTable at the couponIndex\n            newHeads.forEach(async (head, i)=> {\n                let indx = (couponIndex + 4) + i\n                console.log(`IM INSERTING A COLUMN AT ${indx} | ${getLetterByIndex(indx)}`)\n                dataTable.columns.add(indx,  null, head);\n                await context.sync();\n            })\n            await context.sync();\n\n\n            // Error. Check newHeads\n            headArr.splice(couponIndex + 4, 0, ...newHeads);\n\n            console.log(\" \")\n\n            // Update body data to newBodyArr\n            return new Promise((resolve, reject) => {\n                // Loop the body rows, inserting 9 columns for the\n                // 3 expiration options\n                let newBodyArr = bodyArr.map((row, i) => {\n\n                    // How many coupons will this row's artwork have?\n                    let numCoupons = row[couponIndex];\n                    if (numCoupons == \"\") numCoupons = 0;\n\n                    // We will add 9 columns no matter what\n                    // If there are 0 coupons, 9 empty values are fine\n                    let empArr = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n\n                    if (numCoupons >= 1) {\n\n                        // Get the expiration values from this row\n                        const expText = row[couponIndex + 1];\n                        const expDate = excelDateToString(row[couponIndex + 2]);\n                        const expDisc = row[couponIndex + 3];\n\n                        // Set a starting index based on num of expiration dates\n                        let empArrI;\n                        if (numCoupons == 1) empArrI = 0;\n                        if (numCoupons == 2) empArrI = 3;\n                        if (numCoupons == 3) empArrI = 6;\n\n                        // Set values for this row.\n                        empArr[empArrI] = expText;\n                        empArr[empArrI + 1] = expDate;\n                        empArr[empArrI + 2] = expDisc;\n\n                    }\n                    \n                    // Insert empty (or not) array into this row at index 4 to\n                    // the right of the couponIndex\n                    row.splice((couponIndex + 4), 0, ...empArr);\n\n                    // Return row with added columns\n                    return row;\n                    // End Promise\n                });\n                resolve(newBodyArr)\n                reject(err)\n\n            });\n\n            // END EXPIRATIONS }}}\n        }\n\n            // Process the Expiration data\n            // let newBodyArr = await addExpirations();\n            let newBodyArr = await addExpirations();\n\n            // I'm not sure this is doing anything, actually.\n            bodyRangeValues.values = newBodyArr;\n\n            await context.sync().catch(e => {\n                console.log(e)\n            });\n            \n        // End New Mover Conditional\n    }\n\n        // Add the Curres/Ocurres columns if we're supposed to.\n        if (curres) {\n            // arr is the spreadsheet.\n            if (alternate){\n                headerRangeValues.values[0].splice(6, 0, \"curres\");\n                headerRangeValues.values[0].splice(7, 0, \"orcurres\");\n            } else {\n                headerRangeValues.values[0].splice(5, 0, \"curres\");\n                headerRangeValues.values[0].splice(6, 0, \"orcurres\");\n    \n            }\n    \n            arr.forEach((a) => {\n                if (a.includes(\"Or Current Resident\")) {\n                    a.splice(5, 0, \"\", \"Or Current Resident\");\n                } else {\n                    a.splice(5, 0, \"Current Resident\", \"\");\n                }\n                });\n        }\n    \n\n        console.log(\"BEFORE\", newHeaders)\n        for (var i = 1; i < numUp + 1; i++) {\n            // Add a set of headers indicating which 'up' this is\n            newHeaders = newHeaders.concat(headArr\n                .map((val) => `${val}${i !== 1 ? i : \"\"}`));\n        }\n        console.log(\"AFTER\", newHeaders)\n\n        if (alternate) {\n            ////////////////////////////////////////////////////////////////////////////////\n            //////////////////////////////// ALTERNATE ROWS ////////////////////////////////\n            ////////////////////////////////////////////////////////////////////////////////\n            // #region \n                \n                // add alt column.\n                for (let i=0; i < arr.length; i++){\n                    let modulo= (i % numUp) + 1;\n                    arr[i].unshift(modulo)\n                }\n                \n\n                // group by modulo thing.\n                var output = [];\n                for(let i=0; i< numUp; i++){\n                    output.push(arr.filter(item => item[0] === i+1));\n                }\n                // Maybe change output arr?\n\n                arr = output[0].map((_,j) =>  {\n                    var arrOut = output.map(row => {\n                        return row[j]\n                    })\n                    var newArr = []\n                    for (var n = 0; n < arrOut.length; n++) {\n                       newArr = newArr.concat(arrOut[n]) \n                    }\n                    return newArr\n                });\n                \n            // #endregion        \n\n        } \n        else {\n         \n\n            ////////////////////////////////////////////////////////////////////////////////\n            //////////////////////////////// STANDARD ROWS /////////////////////////////////\n            ////////////////////////////////////////////////////////////////////////////////\n\n            if ((arr.length / 2) < numUp) alert(\"NO\")\n            let spIndex = Math.floor(arr.length / numUp);  \n            (arr.length % numUp) > 0 && spIndex++\n    \n    \n    \n            let spl = arr.splice(0, spIndex); // x up, first y fruits\n    \n    \n            var sampleArr= new Array();\n\n           \n            let arrLen = arr.length\n            \n            for (var x = 0; x < numUp - 1; x++) {\n                \n                let add= arr.splice(0, spIndex); // Takes the first 3 from arr\n\n                spl.forEach((_item, n)=>{\n                    if (add[n]){\n                        // Cool, the cells from this exist.\n                        spl[n] = spl[n].concat(add[n]); //spl[n] gets the values of add[n].\n                    } else {\n                        // Loop through the items?\n                        spl[n] = spl[n].concat(sampleArr)\n\n    \n                    }\n                })\n                arrLen--;\n            }\n\n            if (!alternate) arr = [...spl];\n            // #endregion\n        }\n\n        await context.sync();\n\n        // Add samples at the end\n        arr.forEach((_c, row) => {\n\n            if(newHeaders.length > arr[row].length){\n                let newIndex= arr[row].length ;\n                for (let cell = newIndex; cell < newHeaders.length; cell++) {\n                        let thisHead = newHeaders[cell];\n                        if (thisHead.includes(\"@\") || thisHead.includes(\"Visu\")) {\n                            arr[row][cell] = \"\"\n                        } else {\n                            arr[row][cell]= \"SAMPLE\";\n                        }\n                }\n                }\n            \n        })\n\n        if (!arr) throw new Error(\"No new data.\");\n\n\n        ////////////////////////////////////////////////////////////////////////////////\n        ////////////////////////////////// DATA DROPS. /////////////////////////////////\n        ////////////////////////////////////////////////////////////////////////////////\n\n\n        // #region\n        // We need an array to collect all of the drops now.\n        let splitAt = Math.ceil((arr.length + 1) / numDrops)\n        \n        for (var i = 0; i < numDrops; i++) {\n            let newArr = arr.splice(0, splitAt);\n\n            // Create new sheet for drop\n            let sheets = context.workbook.worksheets;\n            let newSheet = sheets.add(`Split ${i + 1}`);\n\n            // Load range that matches the length of the new split data\n            let newTableRange = newSheet.getRangeByIndexes(0,\n                0, 1, newArr[0].length);\n\n            newTableRange.load(\"address\");\n            await context.sync();\n\n            // Create drop table\n            let dropTable = newSheet.tables.add(newTableRange.address, true);\n            await context.sync();\n\n            // Create headers or table\n            dropTable.getHeaderRowRange().values = [newHeaders]\n            await context.sync();\n            \n            // Add \"SAMPLE\" to head of this table\n            if (sampleRows){\n                let trashRow= new Array();\n                newHeaders.forEach((head) => {\n                   if (head.includes(\"@\") || head.includes(\"Visu\")) {\n                    trashRow.push(\"\")\n                    } else {\n                        trashRow.push(\"SAMPLE\");\n                    } \n                \n            });\n                await context.sync()\n                for (let n = 0; n < 5; n++) newArr.unshift(trashRow)\n            }\n\n            await context.sync();\n\n        \n            // Add data to the table\n            dropTable.rows.add(null, newArr);\n            newSheet.activate();\n\n\n            // Format the columns.       \n            var zeroNum= bodyRangeValues.values.length;\n            let countIndexes= new Array();\n            // Which columns are count columns?\n            newHeaders.forEach((clmn, indx) => {\n                if (clmn.match(/count/gi)) {\n                    countIndexes.push(indx); // Push the index directly\n                }\n            });  \n            // Add \"let\" here because the code won't run otherwise.\n            for (let k in countIndexes){\n                const rowRange = newSheet.getRange(`${getLetterByIndex(countIndexes[k])}2`).getEntireColumn();\n                rowRange.numberFormat = (\"0\").repeat(countDigits(zeroNum))\n                await context.sync();\n            }\n\n            var headLength = newArr[0].length;\n            var dateCols = new Array();\n            for (let column = 0; column < headLength; column++) {\n\n                // Start at row 5. Always skips the Sample rows, and it doesn't matter that we missed the first 4.\n                for (let row = 5; row < newArr.length; row++) {\n                    var col1 = newArr[row][column];\n                    if (col1 != \"\") {\n                        if (typeof col1 == \"number\" && col1 > 40000) {\n                            dateCols.push(column)\n                            break;\n                        }\n                        break;\n                    }\n                }\n            }\n            \n\n        // Now, fire! Format every found column with the preferred date format.\n        for (let column in dateCols){\n            var colRange = newSheet.getRange(`${getLetterByIndex(dateCols[column])}2`).getEntireColumn();\n            colRange.numberFormat = dateFormat;\n        }\n\n            await context.sync(); \n        // End Loop\n    }\n\n    await context.sync();\n    \n    // Loop the number of times the user chose to be 'up'\n    for (var i = 1; i < numUp + 1; i++) {\n        \n        if (i == 1) {\n            // The first time through, set the array to contain\n            // the new table data to the items with count 1\n            arr = bodyRangeValues.values.filter((row) => row[0] == i); // Error\n            continue;\n        }\n        \n        // Loop the next one, adding to the first\n        const nextArr = bodyRangeValues.values.filter((row) => row[0] == i); \n        \n\n        nextArr.forEach((row, x) => {\n            arr[x] = arr[x].concat(row);\n        })\n\n        if (i == numUp) {\n            // The last iteration, we need to fill remainder of empty\n            // columns with \"BLANK\"\n            const numEmptyData = arr.length - nextArr.length;\n            for (var n = 1; n < numEmptyData + 1; n++) {\n\n                const trashData = bodyRangeValues.values[0].map((data) => {\n\n                    // Ignore anything with an img file output.\n                    let dataSuff;\n                    try {\n                        dataSuff = data.split(\".\")[1].toLowerCase();\n                        } catch (e) {\n                        // Probably no file extension.\n                        dataSuff = null;\n                        }\n                    // Here, check for newheaders' having \"Visu\" in the header\n                    console.log(\"New Headers: \", newHeaders[data])\n                    if (imgSuffix.includes(dataSuff)) return \"\"\n                        \n                    // Add Sample to any other columns.\n                    return \"SAMPLE\"\n                })\n                arr[arr.length - n] = arr[arr.length - n].concat(trashData);                    \n            }\n        }\n    }\n\n    setTimeout(loaderHide(), 2000);\n    });\n\n\n    document.querySelectorAll(\"#btn-process, #screen-1\")\n        .forEach((elem) => {\n            elem.style.display = \"none\";\n        });\n\n    // #endregion\n});\n\n\n\n//         +----------------------------------------------------------+\n//         |                     NUMBER UP CHANGE                     |\n//         +----------------------------------------------------------+\ndocument.getElementById(\"num-up\").addEventListener(\"change\", async () => {\n    // #region\n    const altRowsElem = document.getElementById(\"alt-rows\")\n    // If ALternating Rows is selected, de-select it\n    // so that the user is forced to reselect it.\n\n    const checked = altRowsElem.checked;\n\n    if (checked) {\n        altRowsElem.checked = false;\n        // Force the count column to recalculate\n        let event = new Event('change');\n\n        altRowsElem.dispatchEvent(event);\n        showMessage(\n            \"Count column reset.\",\n            \"Turn back on Alternating Rows to recalculate the count column.\",\n            \"error\"\n        )\n    }\n    // #endregion\n});\n\n//         +----------------------------------------------------------+\n//         |                       APPEND TEXT                        |\n//         +----------------------------------------------------------+\ndocument.getElementById(\"append\").addEventListener(\"click\", async () => {\n    return Excel.run(async function(context) {\n        let appendText= document.querySelector(\"#appendData\").value;\n\n        const sheet = context.workbook.worksheets.getActiveWorksheet();    \n\n        const table = context.workbook.tables.getItem(\"DataTable\")\n        const tableData = table.getDataBodyRange().load('values');\n\n        const selRange = context.workbook.getSelectedRange().getEntireColumn().load([\"columnIndex\", 'address'])\n\n        await context.sync()\n\n        const index = selRange.columnIndex;\n        const addr = selRange.address;\n\n        let newTableData = []\n        for (var i = 0; i < tableData.values.length; i++) {\n            let row = tableData.values[i];\n            let alteredData = row.map((cell, i) => {\n                if (i === index) {\n                    return `${cell}${appendText}`\n                } else {\n                    return cell\n                }\n            })\n\n            newTableData = newTableData.concat([alteredData])\n\n        }\n        tableData.values = newTableData;\n        \n        await context.sync();\n\n      });\n});\n\n//         +----------------------------------------------------------+\n//         |                       PREPEND TEXT                       |\n//         +----------------------------------------------------------+\ndocument.getElementById(\"prepend\").addEventListener(\"click\", async () => {\n    return Excel.run(async function(context) {\n        let prependText= document.querySelector(\"#prependData\").value;\n\n        const sheet = context.workbook.worksheets.getActiveWorksheet();    \n\n        const table = context.workbook.tables.getItem(\"DataTable\")\n        const tableData = table.getDataBodyRange().load('values');\n\n        const selRange = context.workbook.getSelectedRange().getEntireColumn().load([\"columnIndex\", 'address'])\n\n        await context.sync()\n\n        const index = selRange.columnIndex;\n        const addr = selRange.address;\n\n        let newTableData = []\n        for (var i = 0; i < tableData.values.length; i++) {\n            let row = tableData.values[i];\n            let alteredData = row.map((cell, i) => {\n                if (i === index) {\n                    return `${prependText}${cell}`\n                } else {\n                    return cell\n                }\n            })\n\n            newTableData = newTableData.concat([alteredData])\n\n        }\n        tableData.values = newTableData;\n        \n        await context.sync();\n\n      });\n});\n\n//         +----------------------------------------------------------+\n//         |                        lowercase                         |\n//         +----------------------------------------------------------+\ndocument.getElementById(\"lowercase\").addEventListener(\"click\", async () => {\n    return Excel.run(async function(context) {\n        const sheet = context.workbook.worksheets.getActiveWorksheet();    \n\n        const table = context.workbook.tables.getItem(\"DataTable\")\n        const tableData = table.getDataBodyRange().load('values');\n\n        const selRange = context.workbook.getSelectedRange().getEntireColumn().load([\"columnIndex\", 'address'])\n\n        await context.sync()\n\n        const index = selRange.columnIndex;\n        const addr = selRange.address;\n\n        let newTableData = []\n        for (var i = 0; i < tableData.values.length; i++) {\n            let row = tableData.values[i];\n            let alteredData = row.map((cell, i) => {\n                if (i === index) {\n                    return String(cell).toLowerCase()\n                } else {\n                    return cell\n                }\n            })\n\n            newTableData = newTableData.concat([alteredData])\n\n        }\n        tableData.values = newTableData;\n        \n        await context.sync();\n\n      });\n});\n\n//         +----------------------------------------------------------+\n//         |                        UPPERCASE                         |\n//         +----------------------------------------------------------+\ndocument.getElementById(\"uppercase\").addEventListener(\"click\", async () => {\n    return Excel.run(async function(context) {\n        const sheet = context.workbook.worksheets.getActiveWorksheet();    \n\n        const table = context.workbook.tables.getItem(\"DataTable\")\n        const tableData = table.getDataBodyRange().load('values');\n\n        const selRange = context.workbook.getSelectedRange().getEntireColumn().load([\"columnIndex\", 'address'])\n\n        await context.sync()\n\n        const index = selRange.columnIndex;\n        const addr = selRange.address;\n\n        let newTableData = []\n        for (var i = 0; i < tableData.values.length; i++) {\n            let row = tableData.values[i];\n            let alteredData = row.map((cell, i) => {\n                if (i === index) {\n                    return String(cell).toUpperCase()\n                } else {\n                    return cell\n                }\n            })\n\n            newTableData = newTableData.concat([alteredData])\n\n        }\n        tableData.values = newTableData;\n        \n        await context.sync();\n\n      });\n});\n\n//         +----------------------------------------------------------+\n//         |                       Title Case                         |\n//         +----------------------------------------------------------+\ndocument.getElementById(\"titlecase\").addEventListener(\"click\", async () => {\n    return Excel.run(async function(context) {\n        const sheet = context.workbook.worksheets.getActiveWorksheet();    \n\n        const table = context.workbook.tables.getItem(\"DataTable\")\n        const tableData = table.getDataBodyRange().load('values');\n\n        const selRange = context.workbook.getSelectedRange().getEntireColumn().load([\"columnIndex\", 'address'])\n\n        await context.sync()\n\n        const index = selRange.columnIndex;\n        const addr = selRange.address;\n\n        let newTableData = []\n        for (var i = 0; i < tableData.values.length; i++) {\n            let row = tableData.values[i];\n            let alteredData = row.map((cell, i) => {\n                if (i === index) {\n                    return toTitleCase(String(cell));\n                } else {\n                    return cell\n                }\n            })\n\n            newTableData = newTableData.concat([alteredData])\n\n        }\n        tableData.values = newTableData;\n        \n        await context.sync();\n\n      });\n});\n\n//         +----------------------------------------------------------+\n//         |                      ARTWORK COLUMN                      |\n//         +----------------------------------------------------------+\ndocument.getElementById(\"artworkCol\").addEventListener(\"click\", async () => {\n    return Excel.run(async function(context) {\n        let dirText= document.querySelector(\"#artworkData\").value;\n\n        const sheet = context.workbook.worksheets.getActiveWorksheet();    \n\n        const table = context.workbook.tables.getItem(\"DataTable\")\n        const tableData = table.getDataBodyRange().load('values');\n\n        const selRange = context.workbook.getSelectedRange().getEntireColumn().load([\"columnIndex\", 'address'])\n\n        await context.sync()\n\n        const index = selRange.columnIndex;\n        const addr = selRange.address;\n\n        let newTableData = []\n        for (var i = 0; i < tableData.values.length; i++) {\n            let row = tableData.values[i];\n            let alteredData = row.map((cell, j) => {\n              // Check if current cell (j) needs modification (based on your index condition)\n              if (j === index) {\n                // Split the cell at the dot (.)\n                const parts = cell.split('.');\n                // Lowercase everything after the first dot\n                parts[1] = parts[1] ? parts[1].toLowerCase() : ''; // Handle empty strings after dot\n                // Join the parts back together\n                return `${dirText}${parts.join('.')}`;\n              } else {\n                return cell;\n              }\n            });\n            // Update the row with the modified data\n            newTableData = newTableData.concat([alteredData])\n          }\n                  \n          \n        tableData.values = newTableData;\n        \n        await context.sync();\n\n        // Get the first table on this sheet\n        let activeTable = sheet.tables.getItemAt(0);\n\n        // Get the headers from the table\n        let headerRangeValues = activeTable.getHeaderRowRange().load(\"values\");\n        await context.sync();\n        let newHeaderData = []\n\n        for (var i = 0; i < headerRangeValues.values.length; i++) {\n            let row = headerRangeValues.values[i];\n\n            let alteredHeaders = row.map((cell, j) => {\n              // Check if current cell (j) needs modification (based on your index condition)\n              if (j === index) {\n                return `'@${cell}`;\n              } else {\n                return cell;\n              }\n            });\n            // Update the row with the modified data\n            newHeaderData = newHeaderData.concat([alteredHeaders])\n          }\n          headerRangeValues.values = newHeaderData;\n        \n          await context.sync();\n      });\n});\n\n//  ============================================================================\n\n//         +----------------------------------------------------------+\n//         |                     HELPER FUNCTIONS                     |\n//         +----------------------------------------------------------+\n\n// ┌\n// │ SHOW MESSAGE                                             \n// └                                                           \nconst showMessage = (title, message, type) => {\n    // #region Shows a message to the user \n    document.querySelector(\"#message-contents > h4\").innerHTML = title;\n    document.querySelector(\"#message-contents > p\").innerHTML = message;\n    document.getElementById(\"message\").style.display = \"flex\";\n\n    switch (type) {\n        case \"alert\":\n            document.querySelector('#message-contents > h4')\n                .style.color = \"mediumseagreen\";\n            break;\n\n        case \"error\":\n            document.querySelector('#message-contents > h4')\n                .style.color = \"crimson\";\n            break;\n    }\n\n    // #endregion\n}\n\n\n// ┌\n// │ DISMISS MESSAGE                                          \n// └                                                           \ndocument.getElementById(\"msg-dismiss\").addEventListener(\"click\", () => {\n    // #region\n    document.getElementById(\"message\").style.display = \"none\";\n    // #endregion\n})\n\n// ┌\n// │ SHOW LOADER                                              \n// └                                                           \nfunction loaderShow (title, message) {\n    // #region\n    document.querySelector(\"#loader-contents > h4\").innerHTML = title;\n    document.querySelector(\"#loader-contents > p\").innerHTML = message;\n    document.getElementById(\"loader-container\").style.display = \"flex\";\n    // #endregion\n}\n\n// ┌\n// │ HIDE LOADER                                              \n// └                                                           \nfunction loaderHide() {\n    // #region\n    document.querySelector(\"#loader-contents > h4\").innerHTML = \"\";\n    document.querySelector(\"#loader-contents > p\").innerHTML = \"\";\n    document.getElementById(\"loader-container\").style.display = \"none\";\n    // #endregion\n}\n\n// ┌\n// │ WIPE SPLIT SHEETS                                        \n// └                                                           \nconst wipeSheets = async () => {\n    // #region\n    console.log(\"Wiping the sheets....\");\n\n    await Excel.run(async (context) => {\n\n        const sheets = context.workbook.worksheets;\n        sheets.load(\"items/name\");\n\n        await context.sync()\n            .catch((e) => {\n                console.log(\"Unable to load the worksheets...\");\n                console.log(e);\n            });\n\n        sheets.items.forEach((sheet) => {\n            console.log(\"Removing a sheet...\");\n            if (sheet.name.includes(\"Split\")) {\n                sheet.delete();\n            }\n        });\n\n        await context.sync()\n            .catch((e) => {\n                console.log(\"Unable to delete the splits sheets\");\n                console.log(e);\n            });\n\n    });\n    // #endregion\n}\n\n//  ============================================================================\n","export default function getPresets() {\n    return [\n        {\n            \"name\": \"Monthly New Movers\",\n            \"alternateRows\": false,\n            \"numberUp\": 4,\n            \"numberDrops\": 8,\n            \"trashRows\": false,\n            \"curres\": true,\n        },\n        {\n            \"name\": \"Plastic New Movers\",\n            \"alternateRows\": true,\n            \"numberUp\": 9,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": true,\n        },\n        {\n            \"name\": \"Mr. Jim's New Movers\",\n            \"alternateRows\": false,\n            \"numberUp\": 4,\n            \"numberDrops\": 1,\n            \"trashRows\": false,\n            \"curres\": true,\n        },\n        {\n            \"name\": \"Envelope Mailer 8.5\\\" x 11\\\"\",\n            \"alternateRows\": false,\n            \"numberUp\": 2,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": false,\n        },\n        {\n            \"name\": \"Envelope Mailer 8.5\\\" x 14\\\"\",\n            \"alternateRows\": false,\n            \"numberUp\": 1,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": false,\n        },\n        {\n            \"name\": \"Plastic Postcard (Small)\",\n            \"alternateRows\": true,\n            \"numberUp\": 9,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": false,\n        },\n        {\n            \"name\": \"Plastic Postcard (Medium)\",\n            \"alternateRows\": true,\n            \"numberUp\": 4,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": false,\n        },\n        {\n            \"name\": \"Plastic Postcard (Large)\",\n            \"alternateRows\": true,\n            \"numberUp\": 3,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": false,\n        },\n        {\n            \"name\": \"Postcards\",\n            \"alternateRows\": false,\n            \"numberUp\": 3,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": false,\n        },\n        {\n            \"name\": \"Magnets\",\n            \"alternateRows\": false,\n            \"numberUp\": 4,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": false,\n        },\n        {\n            \"name\": \"Menus\",\n            \"alternateRows\": false,\n            \"numberUp\": 1,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": false,\n        },\n        {\n            \"name\": \"Non-Monthly New Movers\",\n            \"alternateRows\": false,\n            \"numberUp\": 4,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": true,\n        }\n    ]\n}\n","// Just to keep people entertained while Excel works.\nexport default function getSplash() {\n    return [\n        \"Fun fact: Sharks have no bones.\",\n        \"Fun fact: Sharks date back as far as 450 million years ago, compared to dinosaurs who date back 230-240 million years ago.\",\n        \"Fun fact: If you petted a shark, it'd feel like petting sandpaper.\",\n        \"Fun fact: Some sharks-- but not all-- must swim constantly in order to breathe. Talk about a workout.\",\n        \"Fun fact: Sharks have a surprisingly good memory compared to other animals. They can remember as far back as nearly a year.\",\n        \"Fun fact: Sharks are colorblind.\",\n        \"Fun fact: Whale sharks can measure about as long as a school bus.\",\n        \"What do you call a dapper shark? <em>So-fish-dicated.</em>\",\n        \"Did you hear about the all-star shark athlete? He led his team to the <em>chomp-ionship!</em>\",\n        \"Why do sharks live in salt water? Because pepper water would make them sneeze.\",\n        \"You're doing <em>fin-tastic.</em>\",\n        \"The last shark we helped left us a <em>biting</em> review...\",\n        \"Who did all the fish in the sea owe money to? The loan shark, of course.\"\n    ]\n}"],"names":["___HTML_LOADER_IMPORT_0___","___HTML_LOADER_IMPORT_1___","module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","_regeneratorRuntime","t","r","value","Symbol","iterator","c","asyncIterator","u","toStringTag","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","v","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","args","arguments","apply","err","presets","splashText","currentYear","Date","getFullYear","imgSuffix","toTitleCase","str","words","split","suffixes","titles","word","includes","toUpperCase","toLowerCase","join","getLetterByIndex","index","alphabet","letter","Math","floor","countDigits","number","Office","onReady","console","log","preset","getElementById","innerHTML","alternateRows","numberUp","numberDrops","querySelector","addEventListener","_callee","selSet","text","product","_context","selectedIndex","filter","checked","trashRows","curres","headArr","collapsibles","getElementsByClassName","whatArea","getAttribute","toggleArea","curStyle","style","display","_callee3","_context3","Excel","run","_ref3","_callee2","context","sheet","range","dataTable","indexData","bodyRangeValues","zeroNum","_context2","workbook","worksheets","getActiveWorksheet","getUsedRange","load","sync","address","showMessage","tables","add","t0","message","getDataBodyRange","_row","unshift","columns","getRange","getEntireColumn","numberFormat","repeat","format","autofitColumns","autofitRows","activate","_x","querySelectorAll","elem","wipeSheets","_callee7","_context10","title","arr","random","_ref5","_callee6","numUp","alternate","numDrops","dateFormat","sampleRows","headerRangeValues","newHeaders","newHeads","colName","bodyArr","addExpirations","newBodyArr","_i2","modulo","output","_loop","_i3","spIndex","spl","sampleArr","_loop2","x","splitAt","_loop3","headLength","dateCols","col1","nextArr","numEmptyData","trashData","_context9","Number","getItem","getHeaderRowRange","delete","map","row","match","items","indexOf","_ref6","_callee5","_headArr","couponIndex","_context5","_ref7","_callee4","head","indx","_context4","_x3","_x4","splice","numCoupons","excelDate","date","month","day","empArr","empArrI","expText","expDate","getMonth","getDate","toString","expDisc","val","_context6","item","_","j","arrOut","newArr","alert","Array","_context7","_item","_toConsumableArray","_c","cell","thisHead","ceil","sheets","newSheet","newTableRange","dropTable","trashRow","_n","countIndexes","k","column","_column","_context8","getRangeByIndexes","rows","clmn","t1","data","dataSuff","setTimeout","_x2","_callee8","altRowsElem","event","_context11","Event","dispatchEvent","_callee10","_context13","_ref10","_callee9","appendText","table","tableData","selRange","newTableData","alteredData","_context12","getSelectedRange","columnIndex","_x5","_callee12","_context15","_ref12","_callee11","prependText","_context14","_x6","_callee14","_context17","_ref14","_callee13","_context16","_x7","_callee16","_context19","_ref16","_callee15","_context18","_x8","_callee18","_context21","_ref18","_callee17","_context20","_x9","_callee20","_context23","_ref20","_callee19","dirText","activeTable","newHeaderData","_row2","alteredHeaders","_context22","parts","getItemAt","_x10","color","_ref21","_callee22","_context25","_ref22","_callee21","_context24","_x11","URL"],"sourceRoot":""}